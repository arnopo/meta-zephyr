From 6cfe71425bc58cfde06a217c426526e8fd6bbe0b Mon Sep 17 00:00:00 2001
From: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Date: Tue, 1 Feb 2022 15:15:42 +0100
Subject: [PATCH] sample: ipc : add rpmsg tty channel support in openamprsc
 table sample

Add the support of a rpmsg tty channel that responds to Linux
rpmsg_tty driver.

Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
---
 .../ipc/openamp_rsc_table/src/main_remote.c   | 62 ++++++++++++++++++-
 1 file changed, 61 insertions(+), 1 deletion(-)

diff --git a/samples/subsys/ipc/openamp_rsc_table/src/main_remote.c b/samples/subsys/ipc/openamp_rsc_table/src/main_remote.c
index 7221827991ab..093b14a41772 100644
--- a/samples/subsys/ipc/openamp_rsc_table/src/main_remote.c
+++ b/samples/subsys/ipc/openamp_rsc_table/src/main_remote.c
@@ -30,12 +30,16 @@ LOG_MODULE_REGISTER(openamp_rsc_table, LOG_LEVEL_DBG);
 #define SHM_START_ADDR	DT_REG_ADDR(SHM_NODE)
 #define SHM_SIZE		DT_REG_SIZE(SHM_NODE)
 
+#define MAX_TTY_EPT  2
+
 #define APP_TASK_STACK_SIZE (512)
 K_THREAD_STACK_DEFINE(thread_stack, APP_TASK_STACK_SIZE);
 K_THREAD_STACK_DEFINE(thread_stack_1, APP_TASK_STACK_SIZE);
+K_THREAD_STACK_DEFINE(thread_stack_2, APP_TASK_STACK_SIZE * 2);
 
 static struct k_thread thread_data;
 static struct k_thread thread_data_1;
+static struct k_thread thread_data_2;
 
 static const struct device *ipm_handle;
 
@@ -71,7 +75,11 @@ static char rx_sc_msg[20];  /* should receive "Hello world!" */
 static struct rpmsg_endpoint sc_ept;
 static struct rpmsg_rcv_msg sc_msg = {.data = rx_sc_msg};
 
+static struct rpmsg_endpoint tty_ept[MAX_TTY_EPT];
+static struct rpmsg_rcv_msg tty_msg[MAX_TTY_EPT];
+
 static K_SEM_DEFINE(data_sc_sem, 0, 1);
+static K_SEM_DEFINE(data_tty_sem, 0, 1);
 static K_SEM_DEFINE(data_sem, 0, 1);
 
 static void platform_ipm_callback(const struct device *dev, void *context,
@@ -91,6 +99,19 @@ static int rpmsg_recv_cs_callback(struct rpmsg_endpoint *ept, void *data,
 	return RPMSG_SUCCESS;
 }
 
+static int rpmsg_recv_tty_callback(struct rpmsg_endpoint *ept, void *data,
+				   size_t len, uint32_t src, void *priv)
+{
+	struct rpmsg_rcv_msg *tty_msg = priv;
+
+	rpmsg_hold_rx_buffer(ept, data);
+	tty_msg->data = data;
+	tty_msg->len = len;
+	k_sem_give(&data_tty_sem);
+
+	return RPMSG_SUCCESS;
+}
+
 static void receive_message(unsigned char **msg, unsigned int *len)
 {
 	int status = k_sem_take(&data_sem, K_FOREVER);
@@ -273,6 +294,41 @@ void app_rpmsg_client_sample(void *arg1, void *arg2, void *arg3)
 	printk("OpenAMP Linux sample client responder ended\n");
 }
 
+void app_rpmsg_tty(void *arg1, void *arg2, void *arg3)
+{
+	ARG_UNUSED(arg1);
+	ARG_UNUSED(arg2);
+	ARG_UNUSED(arg3);
+	unsigned char buff[512];
+	int i, ret = 0;
+
+	k_sem_take(&data_tty_sem,  K_FOREVER);
+
+	printk("\r\nOpenAMP[remote] Linux tty responder started\r\n");
+
+	tty_ept[0].priv = &tty_msg[0];
+	ret = rpmsg_create_ept(&tty_ept[0], rpdev, "rpmsg-tty",
+			       RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
+			       rpmsg_recv_tty_callback, NULL);
+
+	while (tty_ept[0].addr !=  RPMSG_ADDR_ANY) {
+		k_sem_take(&data_tty_sem,  K_FOREVER);
+		for (i = 0; i < MAX_TTY_EPT; i++) {
+			if (tty_msg[i].len) {
+				snprintf(buff, 8, "TTY %d: ", i);
+				memcpy(&buff[7], tty_msg[i].data, tty_msg[i].len);
+				rpmsg_send(&tty_ept[i], buff, tty_msg[i].len + 8);
+				rpmsg_release_rx_buffer(&tty_ept[i], tty_msg[i].data);
+			}
+			tty_msg[i].len = 0;
+			tty_msg[i].data = NULL;
+		}
+	}
+	rpmsg_destroy_ept(&tty_ept[0]);
+
+	printk("OpenAMP Linux TTY responder ended\n");
+}
+
 void rpmsg_mng_task(void *arg1, void *arg2, void *arg3)
 {
 	ARG_UNUSED(arg1);
@@ -300,8 +356,9 @@ void rpmsg_mng_task(void *arg1, void *arg2, void *arg3)
 		goto task_end;
 	}
 
+	/* start reponders */
 	k_sem_give(&data_sc_sem);
-
+	k_sem_give(&data_tty_sem);
 	while (1) {
 		receive_message(&msg, &len);
 	}
@@ -321,4 +378,7 @@ void main(void)
 	k_thread_create(&thread_data_1, thread_stack_1, APP_TASK_STACK_SIZE,
 			(k_thread_entry_t)app_rpmsg_client_sample,
 			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
+	k_thread_create(&thread_data_2, thread_stack_2, APP_TASK_STACK_SIZE * 2,
+			(k_thread_entry_t)app_rpmsg_tty,
+			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
 }
