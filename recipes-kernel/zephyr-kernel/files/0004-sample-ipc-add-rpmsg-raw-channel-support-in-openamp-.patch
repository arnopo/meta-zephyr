From cecfdc5ecaf85ee75845a0b071d909c2e46e9016 Mon Sep 17 00:00:00 2001
From: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
Date: Wed, 2 Feb 2022 21:17:11 +0100
Subject: [PATCH] sample: ipc : add rpmsg raw channel support in openamp rsc
 table sample

Add the support of a rpmsg raw channel that responds to Linux
rpmsg_char driver.

Signed-off-by: Arnaud Pouliquen <arnaud.pouliquen@foss.st.com>
---
 .../ipc/openamp_rsc_table/src/main_remote.c   | 71 +++++++++++++++++++
 1 file changed, 71 insertions(+)

diff --git a/samples/subsys/ipc/openamp_rsc_table/src/main_remote.c b/samples/subsys/ipc/openamp_rsc_table/src/main_remote.c
index cbf79099eecd..0f023e2399c9 100644
--- a/samples/subsys/ipc/openamp_rsc_table/src/main_remote.c
+++ b/samples/subsys/ipc/openamp_rsc_table/src/main_remote.c
@@ -31,15 +31,18 @@ LOG_MODULE_REGISTER(openamp_rsc_table, LOG_LEVEL_DBG);
 #define SHM_SIZE		DT_REG_SIZE(SHM_NODE)
 
 #define MAX_TTY_EPT  2
+#define MAX_RAW_EPT  2
 
 #define APP_TASK_STACK_SIZE (512)
 K_THREAD_STACK_DEFINE(thread_stack, APP_TASK_STACK_SIZE);
 K_THREAD_STACK_DEFINE(thread_stack_1, APP_TASK_STACK_SIZE);
 K_THREAD_STACK_DEFINE(thread_stack_2, APP_TASK_STACK_SIZE * 2);
+K_THREAD_STACK_DEFINE(thread_stack_3, APP_TASK_STACK_SIZE * 2);
 
 static struct k_thread thread_data;
 static struct k_thread thread_data_1;
 static struct k_thread thread_data_2;
+static struct k_thread thread_data_3;
 
 static const struct device *ipm_handle;
 
@@ -60,6 +63,7 @@ struct metal_device shm_device = {
 struct rpmsg_rcv_msg {
 	void *data;
 	size_t len;
+	uint32_t src;
 };
 
 static struct metal_io_region *shm_io;
@@ -78,8 +82,12 @@ static struct rpmsg_rcv_msg sc_msg = {.data = rx_sc_msg};
 static struct rpmsg_endpoint tty_ept[MAX_TTY_EPT];
 static struct rpmsg_rcv_msg tty_msg[MAX_TTY_EPT];
 
+static struct rpmsg_endpoint raw_ept[MAX_RAW_EPT];
+static struct rpmsg_rcv_msg raw_msg[MAX_RAW_EPT];
+
 static K_SEM_DEFINE(data_sc_sem, 0, 1);
 static K_SEM_DEFINE(data_tty_sem, 0, 1);
+static K_SEM_DEFINE(data_raw_sem, 0, 1);
 static K_SEM_DEFINE(data_sem, 0, 1);
 
 static void platform_ipm_callback(const struct device *dev, void *context,
@@ -112,6 +120,21 @@ static int rpmsg_recv_tty_callback(struct rpmsg_endpoint *ept, void *data,
 	return RPMSG_SUCCESS;
 }
 
+static int rpmsg_recv_raw_callback(struct rpmsg_endpoint *ept, void *data,
+				   size_t len, uint32_t src, void *priv)
+{
+	struct rpmsg_rcv_msg *raw_msg = priv;
+
+	rpmsg_hold_rx_buffer(ept, data);
+	raw_msg->data = data;
+	raw_msg->len = len;
+	raw_msg->src = src;
+
+	k_sem_give(&data_raw_sem);
+
+	return RPMSG_SUCCESS;
+}
+
 static void receive_message(unsigned char **msg, unsigned int *len)
 {
 	int status = k_sem_take(&data_sem, K_FOREVER);
@@ -359,6 +382,50 @@ void app_rpmsg_tty(void *arg1, void *arg2, void *arg3)
 	printk("OpenAMP Linux TTY responder ended\n");
 }
 
+void app_rpmsg_raw(void *arg1, void *arg2, void *arg3)
+{
+	ARG_UNUSED(arg1);
+	ARG_UNUSED(arg2);
+	ARG_UNUSED(arg3);
+	unsigned char buff[512];
+	int i, ret = 0;
+
+	k_sem_take(&data_raw_sem,  K_FOREVER);
+
+	printk("\r\nOpenAMP[remote] Linux raw data responder started\r\n");
+
+	raw_ept[0].priv = &raw_msg[0];
+	ret = rpmsg_create_ept(&raw_ept[0], rpdev, "rpmsg-raw",
+			       RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
+			       rpmsg_recv_raw_callback, NULL);
+
+	printk("\r\nOpenAMP[remote] create a endpoint with address and dest_address set to 0x1\r\n");
+
+	ret = rpmsg_create_ept(&raw_ept[1], rpdev, "rpmsg-raw",
+			       0x1, 0x1,
+			       rpmsg_recv_raw_callback, NULL);
+
+	raw_ept[1].priv = &raw_msg[1];
+	while (raw_ept[0].addr !=  RPMSG_ADDR_ANY) {
+		k_sem_take(&data_raw_sem,  K_FOREVER);
+		for (i = 0; i < MAX_RAW_EPT; i++) {
+			if (raw_msg[i].len) {
+				snprintf(buff, 18, "from ept 0x%04x: ", raw_ept[i].addr);
+				memcpy(&buff[17], raw_msg[i].data, raw_msg[i].len);
+				rpmsg_sendto(&raw_ept[i], buff, raw_msg[i].len + 18,
+					     raw_msg[i].src);
+				rpmsg_release_rx_buffer(&raw_ept[i], raw_msg[i].data);
+			}
+			raw_msg[i].len = 0;
+			raw_msg[i].data = NULL;
+		}
+	}
+	rpmsg_destroy_ept(&raw_ept[0]);
+	rpmsg_destroy_ept(&raw_ept[1]);
+
+	printk("OpenAMP Linux raw data responder ended\n");
+}
+
 void rpmsg_mng_task(void *arg1, void *arg2, void *arg3)
 {
 	ARG_UNUSED(arg1);
@@ -389,6 +456,7 @@ void rpmsg_mng_task(void *arg1, void *arg2, void *arg3)
 	/* start reponders */
 	k_sem_give(&data_sc_sem);
 	k_sem_give(&data_tty_sem);
+	k_sem_give(&data_raw_sem);
 	while (1) {
 		receive_message(&msg, &len);
 	}
@@ -411,4 +479,7 @@ void main(void)
 	k_thread_create(&thread_data_2, thread_stack_2, APP_TASK_STACK_SIZE * 2,
 			(k_thread_entry_t)app_rpmsg_tty,
 			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
+	k_thread_create(&thread_data_3, thread_stack_3, APP_TASK_STACK_SIZE * 2,
+			(k_thread_entry_t)app_rpmsg_raw,
+			NULL, NULL, NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);
 }
